<?xml version="1.0" encoding="UTF-8"?>
<project 
	xmlns="http://maven.apache.org/POM/4.0.0" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>uk.ac.rothamsted.knetminer</groupId>
		<version>5.7-SNAPSHOT</version>
		<artifactId>app-common</artifactId>
	</parent>

	<artifactId>knetminer-initializer</artifactId>

	<name>KnetMiner Initialiser</name>
	<description>Tool to initialise KnetMiner-related data, possibly outside of the web application.</description>

	<developers>
		<developer>
			<name>Marco Brandizi</name>
			<url>https://github.com/marco-brandizi</url>
		</developer>
		<!-- TODO: add more here -->
	</developers>


	<dependencies>
		      			  
	  <dependency>
			<groupId>uk.ac.rothamsted.knetminer</groupId>
			<artifactId>server-datasource-api</artifactId>
			<version>${project.version}</version>
		</dependency>
		
		<!-- 
			The new backend, based on Neo4j. We choose to include this dependency anyway. It can be used or not, using
			the configuration, it doesn't hurt anything if not used. 
		-->
		<dependency>
	    <groupId>uk.ac.rothamsted.knetminer.backend</groupId>
	    <artifactId>cypher-client</artifactId>
		</dependency>			

		<dependency>
			<groupId>net.sourceforge.ondex.core</groupId>
			<artifactId>workflow-api</artifactId>
		</dependency>

		<dependency>
			<groupId>net.sourceforge.ondex.core</groupId>
			<artifactId>memory</artifactId>
		</dependency>

		<dependency>
			<groupId>net.sourceforge.ondex.core</groupId>
			<artifactId>lucene</artifactId>
		</dependency>
		
		<dependency>
			<groupId>org.apache.lucene</groupId>
			<artifactId>lucene-analyzers-common</artifactId>
		</dependency>
		
		<dependency>
			<groupId>com.fasterxml.jackson.dataformat</groupId>
			<artifactId>jackson-dataformat-yaml</artifactId>
		</dependency>
		
		<dependency>
			<groupId>net.sourceforge.ondex.modules</groupId>
			<artifactId>generic</artifactId>
		</dependency>
		
		<dependency>
			<groupId>net.sourceforge.ondex.modules</groupId>
			<artifactId>oxl</artifactId>
		</dependency>
		
		<dependency>
			<groupId>net.sourceforge.ondex.modules</groupId>
			<artifactId>cyjs_json</artifactId>
		</dependency>
		
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
		</dependency>
		
		<dependency>
		  <groupId>io.projectreactor</groupId>
		  <artifactId>reactor-core</artifactId>
		</dependency>
		
		
	  	   							
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-core</artifactId>
			<scope>test</scope>
		</dependency>
		
	</dependencies>

	<build>
	
		<testResources>
			<testResource>
				<directory>src/test/resources</directory>
				<filtering>true</filtering>
			</testResource>
		</testResources>
	

		<plugins>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
			</plugin>
			
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
	      <artifactId>maven-failsafe-plugin</artifactId>
	      <configuration>
	      	<systemProperties>
						<!-- sent to Java -->
	      		<maven.profileId>${maven.profileId}</maven.profileId>
		        <neo4j.server.boltPort>${neo4j.server.boltPort}</neo4j.server.boltPort>
	      	</systemProperties>
	      </configuration>
			</plugin>
			
	  	<plugin>
	  		<artifactId>maven-dependency-plugin</artifactId>
	  		<executions>
		  		<execution>
						<id>download-test-oxl</id>
		  			<phase>generate-test-resources</phase>
		  			<goals><goal>unpack</goal></goals>
		  		</execution>
	  		</executions>
				<configuration>
		    	<artifactItems>
		       	<!--  Download some reference test data, see https://github.com/Rothamsted/knetminer-backend/tree/master/test-data-server -->
		      	<artifactItem>
							<groupId>uk.ac.rothamsted.knetminer.backend</groupId>
							<artifactId>test-data-server</artifactId>
							<version>${knetminer.backend.version}</version>
							<includes>poaceae-sample.oxl</includes>
		        </artifactItem>
		      </artifactItems>  			
				</configuration>
	  	</plugin>
			
			
			<plugin>
		    <groupId>org.apache.maven.plugins</groupId>
		    <artifactId>maven-jar-plugin</artifactId>
		    <executions>
		    		<execution>
		        <goals>
		        	<!-- Used by the CLI -->
		          <goal>test-jar</goal>
		        </goals>
				    <configuration>
				    	<!-- Take it from the sources, cause the generated files are filtered/interpolated -->
				    	<testClassesDirectory>${project.basedir}/src/test/resources</testClassesDirectory>
				    	<includes>
				    		<include>test-dataset/**</include>
				    	</includes>
				    </configuration>
		      </execution>
		    </executions>
		  </plugin>				

		</plugins>

	</build>

	<profiles>
		
		<!-- 
		You need mvn -Pneo4j to run Neo4j-related tests (those using NeoDriverTestResource).
		
		TODO: this is a copy from aratiny-ws. For the moment, it will do, but 
		I need to organise it better, like starting the neo server plug-in 
		once and reusing it here and in other modules too (aratiny-ws, knetminer-initializer-cli),
		similarly to https://github.com/Rothamsted/knetminer-backend/blob/master/resources-init.sh		
		-->
		<profile>
			<id>neo4j</id>
			<properties>
				<maven.profileId>neo4j</maven.profileId>
			</properties>
			<build>
				<plugins>
					
					<plugin>
					  <groupId>org.apache.maven.plugins</groupId>
					  <artifactId>maven-resources-plugin</artifactId>
					  <configuration>
					  	<!-- 
					  	We want this, cause there are some empty dirs that must exist in the final config in order to
					  	  avoid file-not-found errors 
					  	-->
					    <includeEmptyDirs>true</includeEmptyDirs>
					  </configuration>
					</plugin>
		
			 		<plugin>
			 			<artifactId>maven-dependency-plugin</artifactId>
			 			<executions>
			 				<execution>
				  			<!-- We need this in this phase, due to /docker/local-env-ex/make.sh -->
				  			<phase>generate-test-resources</phase>
			 					<goals><goal>unpack</goal></goals>
			 				</execution>
			 			</executions>
						<configuration>
			       	<artifactItems>
			       		<!-- Works with the same OXL file that is used to instantiate the neo4j server -->
			       		<artifactItem>
									<groupId>uk.ac.rothamsted.knetminer.backend</groupId>
									<artifactId>test-data-server</artifactId>
									<version>${knetminer.backend.version}</version>
									<includes>poaceae-sample-neo4j.dump,poaceae-sample.oxl</includes>
			       		</artifactItem>
			       	</artifactItems>  						
						</configuration>
			 		</plugin>
			 		
					<!-- 
						Restores Neo4j test DB dump. This happens after neo4j-server-maven-plugin has downladed the 
						server distribution, see below. 
					-->
					<plugin>
					  <groupId>org.codehaus.mojo</groupId>
					  <artifactId>exec-maven-plugin</artifactId>
					  <executions>
					    <execution>
					    	<id>Setup Neo4j test DB</id>
					      <phase>pre-integration-test</phase>
					      <goals>
					        <goal>exec</goal>
					      </goals>
					      <configuration>
					        <executable>src/build/load-test-neo4j.sh</executable>
					      </configuration>
					    </execution>
					  </executions>
					</plugin>		 		
				
				  <!-- 
					A small plug-in that starts Neo4j. 
					
					We are now maintaining it at
					at https://github.com/Rothamsted/neo4j-server-maven-plugin
					
					Most of the properties below are defined in the root knetminer-common POM 
				  -->	  
				  <plugin>
				  	<groupId>com.github.harti2006</groupId>
					  <artifactId>neo4j-server-maven-plugin</artifactId>
						<configuration>
							<version>${neo4j.server.version}</version>
							<port>17490</port><!-- The HTTP port -->
							<boltPort>${neo4j.server.boltPort}</boltPort>
							<serverReadyAttempts>120</serverReadyAttempts>
							<!-- We have our own DB, see above -->
							<deleteDb>false</deleteDb>			
						</configuration>
						<executions>
							<!-- Start/stop just to download it before the restore command above -->
							<execution>
							<id>neo4j-server-download</id>
							<phase>process-test-resources</phase>
							<goals>
								<goal>start</goal>
								<goal>stop</goal>
							</goals>
							<configuration><deleteDb>true</deleteDb></configuration>
							</execution>
							<!-- 
							  Regular start/stop, using the test DB downloaded by dependency plugin.
							  
							  Notes on the hooked phases: the only way to control plugin exec order, when they're
							  linked to the same phase, is to define them in the desired order in the POM. Unfortunately,
							  this is not possible when the plug-in that should go first (Neo4) is in a profile, while the
							  other (jetty) is in the main section. So, we use the (ugly) workaround of hooking neo4j to
							  weird phases.
							-->
							<execution>
								<id>start-neo4j-server</id>
								<phase>pre-integration-test</phase>
								<goals><goal>start</goal></goals>
							</execution>
							<execution>
								<id>stop-neo4j-server</id>
								<phase>post-integration-test</phase>
								<goals><goal>stop</goal></goals>
							</execution>			
						</executions>	        
			    </plugin>
			    
				</plugins>
				
			</build>
							
		</profile>
	
	</profiles>

</project>
