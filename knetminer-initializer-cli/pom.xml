<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	
	<parent>
		<groupId>uk.ac.rothamsted.knetminer</groupId>
		<version>5.7-SNAPSHOT</version>
		<artifactId>app-common</artifactId>
	</parent>

	<artifactId>knetminer-initializer-cli</artifactId>

	<name>knetminer-initializer-cli, KnetMiner Initialiser Client</name>
	<description>A command-line wrapper for the knet-miner-initializer module.</description>

	<dependencies>
	
		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>knetminer-initializer</artifactId>
			<version>${project.version}</version>
		</dependency>
				
		<dependency>
		  <groupId>info.picocli</groupId>
		  <artifactId>picocli</artifactId>
		</dependency>

		<!-- Needed with the compile scope, so we can include it in the assembly -->
		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>knetminer-initializer</artifactId>
			<version>${project.version}</version>
			<classifier>tests</classifier>
		</dependency>		

		<!-- 
			Use log4j as concrete logger. 
			All log bridges are in the core module.
		-->
		<dependency>
	    <groupId>org.apache.logging.log4j</groupId>
	    <artifactId>log4j-core</artifactId>
		</dependency>

		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<scope>test</scope>
		</dependency>

	</dependencies>

	<build>

		<finalName>${project.artifactId}-${project.version}</finalName>

		<testResources>
			<testResource>
				<directory>src/test/resources</directory>
				<filtering>true</filtering>
			</testResource>
		</testResources>

		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
			</resource>
		</resources>

		<plugins>
		
		  <plugin>
		    <groupId>org.apache.maven.plugins</groupId>
		    <artifactId>maven-surefire-plugin</artifactId>
		  </plugin>
						
  		<plugin>
  			<artifactId>maven-dependency-plugin</artifactId>
  			<executions>
  				<!-- We use the same test resources that the core module uses -->
  				<execution>
  					<id>get-test-resources</id>
  					<phase>generate-test-resources</phase>
  					<goals><goal>unpack</goal></goals>
  					<configuration>
	          	<artifactItems>

				       	<!--  Downloads some reference test data, see https://github.com/Rothamsted/knetminer-backend/tree/master/test-data-server -->
				      	<artifactItem>
									<groupId>uk.ac.rothamsted.knetminer.backend</groupId>
									<artifactId>test-data-server</artifactId>
									<version>${knetminer.backend.version}</version>
									<includes>poaceae-sample.oxl</includes>
				        </artifactItem>
	          	
	          		<!-- 
	          			Reuses test config from the core module.
	          			This is also used to ship the distro zip, see pkg.xml
	          		-->
	            	<artifactItem>
									<groupId>${project.groupId}</groupId>
									<artifactId>knetminer-initializer</artifactId>
									<version>${project.version}</version>
									<classifier>tests</classifier>
									<type>test-jar</type>
      	          <!-- excludes>**/*.class</excludes -->
									<outputDirectory>${project.build.directory}/dependency/test-resources</outputDirectory>	               	
	             	</artifactItem>
	          	</artifactItems>
  					</configuration>
  				</execution>  					    
				</executions>
			</plugin>
			
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<executions>
					<execution>
						<id>filter-n-copy-test-config</id>
						<phase>process-test-resources</phase>
						<goals><goal>copy-resources</goal></goals>
						<configuration>
              <resources>          
                <resource>
                  <directory>${project.build.directory}/dependency/test-resources</directory>
                  <filtering>true</filtering>
                </resource>
              </resources>              
              <outputDirectory>${project.build.directory}/test-classes</outputDirectory>
						</configuration>
					</execution>
					<execution>
						<!-- We copy it in test-classes, to reuse the config files coming from the 
						     core project -->
						<id>copy-oxl</id>
						<phase>process-test-resources</phase>
						<goals><goal>copy-resources</goal></goals>
						<configuration>
              <resources>          
                <resource>
                  <directory>${project.build.directory}/dependency</directory>
                  <filtering>false</filtering>
                  <includes>
										<include>*.oxl</include>
									</includes>                  
                </resource>
              </resources>              
              <outputDirectory>${project.build.directory}/test-classes/test-dataset/data</outputDirectory>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
	      <artifactId>maven-failsafe-plugin</artifactId>
	      <configuration>
	      	<systemPropertyVariables>
						<!-- sent to Java -->
	      		<maven.profileId>${maven.profileId}</maven.profileId>
		        <neo4j.server.boltPort>${neo4j.server.boltPort}</neo4j.server.boltPort>
	      	</systemPropertyVariables>
	      </configuration>
			</plugin>

			<plugin>
				<artifactId>maven-assembly-plugin</artifactId>
				<configuration>
					<archiverConfig>
						<fileMode>0755</fileMode>
						<directoryMode>0755</directoryMode>
						<defaultDirectoryMode>0755</defaultDirectoryMode>
					</archiverConfig>
				</configuration>
				<executions>
					<!-- Builds the CLI distribution zip -->
					<execution>
						<id>make-cli-distro</id>
						<phase>package</phase>
						<goals>
							<goal>single</goal>
						</goals>
						<configuration>
							<finalName>${project.artifactId}-${project.version}</finalName>
							<appendAssemblyId>false</appendAssemblyId>
							<attach>true</attach>
							<descriptors>
								<descriptor>src/main/assembly/pkg.xml</descriptor>
							</descriptors>
						</configuration>
					</execution>
				</executions>
			</plugin>

		</plugins>

	</build>
	
	
	<profiles>
		
		<!-- 
		You need mvn -Pneo4j to run Neo4j-related tests (those using NeoDriverTestResource).
		
		TODO: this is a copy from aratiny-ws and things should be arranged better, 
		see knetminer-initializer/pom.xml	
		-->
		<profile>
			<id>neo4j</id>
			<properties>
				<maven.profileId>neo4j</maven.profileId>
			</properties>
			<build>
				<plugins>
					
					<plugin>
					  <groupId>org.apache.maven.plugins</groupId>
					  <artifactId>maven-resources-plugin</artifactId>
					  <configuration>
					  	<!-- 
					  	We want this, cause there are some empty dirs that must exist in the final config in order to
					  	  avoid file-not-found errors 
					  	-->
					    <includeEmptyDirs>true</includeEmptyDirs>
					  </configuration>
					</plugin>
		
			 		<plugin>
			 			<artifactId>maven-dependency-plugin</artifactId>
			 			<executions>
			 				<execution>
				  			<!-- We need this in this phase, due to /docker/local-env-ex/make.sh -->
				  			<phase>generate-test-resources</phase>
			 					<goals><goal>unpack</goal></goals>
			 				</execution>
			 			</executions>
						<configuration>
			       	<artifactItems>
			       		<!-- Works with the same OXL file that is used to instantiate the neo4j server -->
			       		<artifactItem>
									<groupId>uk.ac.rothamsted.knetminer.backend</groupId>
									<artifactId>test-data-server</artifactId>
									<version>${knetminer.backend.version}</version>
									<includes>poaceae-sample-neo4j.dump,poaceae-sample.oxl</includes>
			       		</artifactItem>
			       	</artifactItems>  						
						</configuration>
			 		</plugin>
			 		
					<!-- 
						Restores Neo4j test DB dump. This happens after neo4j-server-maven-plugin has downladed the 
						server distribution, see below. 
					-->
					<plugin>
					  <groupId>org.codehaus.mojo</groupId>
					  <artifactId>exec-maven-plugin</artifactId>
					  <executions>
					    <execution>
					    	<id>Setup Neo4j test DB</id>
					      <phase>pre-integration-test</phase>
					      <goals>
					        <goal>exec</goal>
					      </goals>
					      <configuration>
					        <executable>src/build/load-test-neo4j.sh</executable>
					      </configuration>
					    </execution>
					  </executions>
					</plugin>		 		
				
				  <!-- 
					A small plug-in that starts Neo4j. 
					
					We are now maintaining it at
					at https://github.com/Rothamsted/neo4j-server-maven-plugin
					
					Most of the properties below are defined in the root knetminer-common POM 
				  -->	  
				  <plugin>
				  	<groupId>com.github.harti2006</groupId>
					  <artifactId>neo4j-server-maven-plugin</artifactId>
						<configuration>
							<version>${neo4j.server.version}</version>
							<port>17490</port><!-- The HTTP port -->
							<boltPort>${neo4j.server.boltPort}</boltPort>
							<serverReadyAttempts>120</serverReadyAttempts>
							<!-- We have our own DB, see above -->
							<deleteDb>false</deleteDb>			
						</configuration>
						<executions>
							<!-- Start/stop just to download it before the restore command above -->
							<execution>
							<id>neo4j-server-download</id>
							<phase>process-test-resources</phase>
							<goals>
								<goal>start</goal>
								<goal>stop</goal>
							</goals>
							<configuration><deleteDb>true</deleteDb></configuration>
							</execution>
							<!-- 
							  Regular start/stop, using the test DB downloaded by dependency plugin.
							  
							  Notes on the hooked phases: the only way to control plugin exec order, when they're
							  linked to the same phase, is to define them in the desired order in the POM. Unfortunately,
							  this is not possible when the plug-in that should go first (Neo4) is in a profile, while the
							  other (jetty) is in the main section. So, we use the (ugly) workaround of hooking neo4j to
							  weird phases.
							-->
							<execution>
								<id>start-neo4j-server</id>
								<phase>pre-integration-test</phase>
								<goals><goal>start</goal></goals>
							</execution>
							<execution>
								<id>stop-neo4j-server</id>
								<phase>post-integration-test</phase>
								<goals><goal>stop</goal></goals>
							</execution>			
						</executions>	        
			    </plugin>
			    
				</plugins>
				
			</build>
							
		</profile>
	
	</profiles>	
	
</project>
