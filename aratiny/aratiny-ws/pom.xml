<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>uk.ac.rothamsted.knetminer</groupId>
		<artifactId>aratiny</artifactId>
		<version>5.7-SNAPSHOT</version>
	</parent>

	<artifactId>aratiny-ws</artifactId>
	<packaging>war</packaging>

	<properties>
	  <!-- 
	  	This is passed to Java tests, to allow them to know what is the current profile, see the <profile> section below 
	  	for	details.
	  -->
		<maven.profileId>default</maven.profileId>
	</properties>

	<dependencies>
	
		<dependency>
			<groupId>uk.ac.rothamsted.knetminer</groupId>
			<artifactId>server-base</artifactId>
			<version>${project.version}</version>
			<type>war</type>
		</dependency>
		
		<dependency>
			<groupId>uk.ac.rothamsted.knetminer</groupId>
			<artifactId>server-ondex</artifactId>
			<version>${project.version}</version>
		</dependency>
		
		<dependency>
			<groupId>org.json</groupId>
			<artifactId>json</artifactId>
			<scope>test</scope>
		</dependency>
		
		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpclient</artifactId>
			<scope>test</scope>
		</dependency>
		
    <dependency>
	    <groupId>com.jayway.jsonpath</groupId>
	    <artifactId>json-path</artifactId>
	    <scope>test</scope>
		</dependency>
		
		<!-- Logging -->
		
    <!-- 
    	The Log4j implementation is enforced on test instances only, production relies on the 
      web container. Re-routings are managed upwards.
     -->    
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-core</artifactId>
			<scope>test</scope>
		</dependency>
		
	</dependencies>

	<build>
		<finalName>aratiny-ws</finalName>
		
		<plugins>
		
	  	<plugin>
	  		<artifactId>maven-dependency-plugin</artifactId>	  		
	  		<executions>
		  		<execution>
		  			<!-- We need this in this phase, due to /docker/local-env-ex/make.sh -->
		  			<phase>generate-test-resources</phase>
		  			<goals><goal>unpack</goal></goals>
		  		</execution>
	  		</executions>
				<configuration>
		    	<artifactItems>
		       	<!--  Download some reference test data, see https://github.com/Rothamsted/knetminer-backend/tree/master/test-data-server -->
		      	<artifactItem>
							<groupId>uk.ac.rothamsted.knetminer.backend</groupId>
							<artifactId>test-data-server</artifactId>
							<version>${knetminer.backend.version}</version>
							<includes>poaceae-sample.oxl</includes>
		        </artifactItem>
		      </artifactItems>  			
				</configuration>
	  	</plugin>
		
			<plugin>
			  <groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
			</plugin>
			
			<plugin>
			  <groupId>org.eclipse.jetty</groupId>
			  <artifactId>jetty-maven-plugin</artifactId>
			  <executions>
			  	<execution>
			  	<id>start</id>
			  	<phase>pre-integration-test</phase>
			  	<goals><goal>start</goal></goals>
			  	</execution>
			  	<execution>
			  	<id>stop</id>
			  	<phase>post-integration-test</phase>
			  	<goals><goal>stop</goal></goals>
			  	</execution>
			  </executions>
			  <configuration>
		      <httpConnector>
		      	<port>${knetminer.api.httpPort}</port>
		      </httpConnector>		    
			    <webApp>
		      	<!-- 
		      		Some of the resources come from ${project.build.testOutputDirectory} (ie, target/test-classes), since
		      		I take the version that is created by <testResources>, since I need the version that
		      		is interpolated by Maven (which is created by <testResorces> below).
		      		
		      		TODO: is interpolation possible with the Jetty plug-in?!
		      	-->
			      <contextPath>/ws</contextPath>
						<allowDuplicateFragmentNames>true</allowDuplicateFragmentNames>
	          <overrideDescriptor>${project.build.testOutputDirectory}/webapp/WEB-INF/web.xml</overrideDescriptor>
			      <resourceBases>
			      	<!-- Contains things like logger config for the test server -->
			      	<resourceBase>${project.basedir}/src/main/webapp</resourceBase>
			      	<resourceBase>${project.build.testOutputDirectory}/webapp</resourceBase>
			      </resourceBases>
			    </webApp>
			    <stopPort>9091</stopPort>
			  </configuration>
			  <dependencies>
					<!-- 
					  This Jetty uses Jakarta/JAXB 3.x, which has this issue: https://github.com/jakartaee/jaxb-api/issues/224
					  that seems to affect us too.
					  
					  TODO: remove in future Jetty versions. 
					-->
					<dependency>
		        <groupId>jakarta.xml.bind</groupId>
		        <artifactId>jakarta.xml.bind-api</artifactId>
		        <version>4.0.1</version>
					</dependency>					
					<dependency>
						<groupId>com.sun.xml.bind</groupId>
						<artifactId>jaxb-impl</artifactId>
						<version>4.0.5</version>
					</dependency>
				</dependencies>
			</plugin>	
		
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>properties-maven-plugin</artifactId>
			</plugin>
	
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
	      <artifactId>maven-failsafe-plugin</artifactId>
	      <configuration>
	      	<systemPropertyVariables>
	      		<maven.profileId>${maven.profileId}</maven.profileId>
	      	</systemPropertyVariables>
	      </configuration>
			</plugin>
			
	    <plugin>
	      <groupId>org.apache.maven.plugins</groupId>
	      <artifactId>maven-war-plugin</artifactId>
	      <configuration>
	        <webResources>
	          <resource>
	            <directory>src/main/webapp</directory>
	            <filtering>true</filtering>
	          </resource>
	        </webResources>
	      </configuration>
	    </plugin>			
	
		</plugins>
		
		<testResources>
			<testResource>
			  <directory>src/test/resources</directory>
			  <filtering>true</filtering>
				<!-- All files except these contain Maven variables that need to be interpolated -->
			  <excludes>
			  	<exclude>**/*.cypher</exclude>
			  </excludes>
			</testResource>
			<!-- So, the others go in unfiltered -->
			<testResource>
			  <directory>src/test/resources</directory>
			  <filtering>false</filtering>
			</testResource>
		</testResources>		
	
	</build>
	
	<profiles>
		<profile>
			<id>neo4j</id>
			<properties>
				<maven.profileId>neo4j</maven.profileId>
				<knetminer.testConfigFileName>test-cfg-neo4j.yml</knetminer.testConfigFileName>		
			</properties>
			<build>
				<plugins>
					
					<plugin>
					  <groupId>org.apache.maven.plugins</groupId>
					  <artifactId>maven-resources-plugin</artifactId>
					  <configuration>
					  	<!-- 
					  	We want this, cause there are some empty dirs that must exist in the final config in order to
					  	  avoid file-not-found errors 
					  	-->
					    <includeEmptyDirs>true</includeEmptyDirs>
					  </configuration>
					</plugin>
		
			 		<plugin>
			 			<artifactId>maven-dependency-plugin</artifactId>	  			
			 			<executions>
			 				<execution>
				  			<!-- We need this in this phase, due to /docker/local-env-ex/make.sh -->
				  			<phase>generate-test-resources</phase>
			 					<goals><goal>unpack</goal></goals>
			 				</execution>
			 			</executions>
						<configuration>
			       	<artifactItems>
			       		<!-- Works with the same OXL file that is used to instantiate the neo4j server -->
			       		<artifactItem>
									<groupId>uk.ac.rothamsted.knetminer.backend</groupId>
									<artifactId>test-data-server</artifactId>
									<version>${knetminer.backend.version}</version>
									<includes>poaceae-sample-neo4j.dump,poaceae-sample.oxl</includes>
			       		</artifactItem>
			       		<!-- Used by the SM/Cypher translator -->
		           	<artifactItem>
						      <groupId>net.sourceforge.ondex</groupId>
									<artifactId>datadir</artifactId>
						      <version>${ondex.version}</version>
						      <type>zip</type>
						      <classifier>data</classifier>
		             	<includes>data/xml/ondex_metadata.xml</includes>
		             	<outputDirectory>${project.build.outputDirectory}</outputDirectory>
		           	</artifactItem>
			       	</artifactItems>  						
						</configuration>
			 		</plugin>
			 		
					<!-- 
						Restores Neo4j test DB dump. This happens after neo4j-server-maven-plugin has downladed the 
						server distribution, see below. 
					-->
					<plugin>
					  <groupId>org.codehaus.mojo</groupId>
					  <artifactId>exec-maven-plugin</artifactId>
					  <executions>
					    <execution>
					    	<id>Setup Neo4j test DB</id>
					      <phase>pre-integration-test</phase>
					      <goals>
					        <goal>exec</goal>
					      </goals>
					      <configuration>
					        <executable>src/build/load-test-neo4j.sh</executable>
					      </configuration>
					    </execution>
					  </executions>
					</plugin>		 		
				
				  <!-- 
					A small plug-in that starts Neo4j. 
					
					We are now maintaining it at
					at https://github.com/Rothamsted/neo4j-server-maven-plugin
					
					Most of the properties below are defined in the root knetminer-common POM 
				  -->	  
				  <plugin>
				  	<groupId>com.github.harti2006</groupId>
					  <artifactId>neo4j-server-maven-plugin</artifactId>
						<configuration>
							<version>${neo4j.server.version}</version>
							<port>17490</port><!-- The HTTP port -->
							<boltPort>${neo4j.server.boltPort}</boltPort>
							<serverReadyAttempts>120</serverReadyAttempts>
							<!-- We have our own DB, see above -->
							<deleteDb>false</deleteDb>			
						</configuration>
						<executions>
							<!-- Start/stop just to download it before the restore command above -->
							<execution>
							<id>neo4j-server-download</id>
							<phase>process-test-resources</phase>
							<goals>
								<goal>start</goal>
								<goal>stop</goal>
							</goals>
							<configuration><deleteDb>true</deleteDb></configuration>
							</execution>
							<!-- 
							  Regular start/stop, using the test DB downloaded by dependency plugin.
							  
							  Notes on the hooked phases: the only way to control plugin exec order, when they're
							  linked to the same phase, is to define them in the desired order in the POM. Unfortunately,
							  this is not possible when the plug-in that should go first (Neo4) is in a profile, while the
							  other (jetty) is in the main section. So, we use the (ugly) workaround of hooking neo4j to
							  weird phases.
							-->
							<execution>
								<id>start-neo4j-server</id>
								<phase>pre-integration-test</phase>
								<goals><goal>start</goal></goals>
							</execution>
							<execution>
								<id>stop-neo4j-server</id>
								<phase>post-integration-test</phase>
								<goals><goal>stop</goal></goals>
							</execution>			
						</executions>	        
			    </plugin>
			    
			    <!-- 
			    	It inherits stuff from the main section. We have to repeat it here, since it's the only way to
			    	force same-phase execution order when using profiles (both jetty and neo4j belong in pre/post integration 
			    	test phases, the former must be started (stopped) before (after) the latter).
			     -->
					<plugin>
					  <groupId>org.eclipse.jetty</groupId>
					  <artifactId>jetty-maven-plugin</artifactId>
					</plugin>		    
				</plugins>
			</build>	
		</profile>
		
		<!-- 
			This is used to run the build in 'console' mode, ie, start Neo4j (if the corresponding profile is enabled)
			and Jetty and then keep them on until the user presses Enter.
			
			There is a (pseudo) test in ApiIT to deal with that, which is invoked aftet the server start and then the 
			(pseudo)test checks if this profile is enabled and, if yes, waits for a user key-press. 
			The build finishes after that step with the usual server shutdowns.
			
			It's all a dirty trick, but we didn't find another way to do it: jetty:run is not enough, we need a whole build
		-->
		<profile>
			<id>console</id>
			<properties>
				<!-- The pseudo-test mentioned above checks if this profile is active via System.getProperty() -->
				<maven.profileId>console</maven.profileId>
			</properties>
		</profile>
			
		<profile>
			<id>docker</id>
			
			<build>
				<!-- We don't test during docker deployment, so all related plugins are turned off -->
				<plugins>
					<plugin>
					  <groupId>org.eclipse.jetty</groupId>
					  <artifactId>jetty-maven-plugin</artifactId>
					  <executions>
					  	<execution><id>start</id><phase>_none_</phase></execution>
					  	<execution><id>stop</id><phase>_none_</phase></execution>
					  </executions>
					</plugin>
				</plugins>
			</build>			
		</profile>	

		<!--
		  Used in /aratiny/manual-test/run-ws-single-specie.sh, 
		  see details there. 
		-->
		<profile>
			<id>singleSpecie</id>
			<properties>
				<!-- It must be used in console mode, so we set it to this -->
				<maven.profileId>console</maven.profileId>
				<knetminer.testConfigFileName>test-cfg-single-specie.yml</knetminer.testConfigFileName>		
			</properties>
		</profile>		
	
	</profiles>

</project>