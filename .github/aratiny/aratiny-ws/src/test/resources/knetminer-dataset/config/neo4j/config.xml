<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.3.xsd">

	<!-- 
		Have a look at this test file for details on how to define Neo4j-related params:
		https://github.com/Rothamsted/knetminer-backend/blob/master/cypher-client/src/test/resources/test-config/config.xml
	-->

  <context:component-scan base-package = "uk.ac.rothamsted.knetminer.backend" />
  
  
  <bean name = "configDirPath" class = "java.lang.String">
  	<constructor-arg value = "${knetminer.configDir}/neo4j" />
  </bean> 
   
   		
	<!-- 
		Custom-made queries are read from the root of the config dir
	 -->
	<bean name = "semanticMotifsQueriesCustom" class = "java.util.Arrays" factory-method = "asList" >
		<constructor-arg>
			<bean class = "uk.ac.ebi.utils.io.IOUtils" factory-method = "readFiles">
				<constructor-arg ref = "configDirPath" />
				<constructor-arg>
					<bean class = "org.apache.commons.io.filefilter.WildcardFileFilter">
						<constructor-arg value = "*.cypher" />
					</bean>
				</constructor-arg>
			</bean>
		</constructor-arg>
	</bean>

	<!-- 
		There might be other queries, produced by the SM converter
	-->
	<bean name = "semanticMotifsQueriesStateMachine" class = "java.util.Arrays" factory-method = "asList" >
		<constructor-arg>
			<bean class = "uk.ac.ebi.utils.io.IOUtils" factory-method = "readFiles">
				<constructor-arg value = "#{configDirPath}/state-machine-queries" />
				<constructor-arg>
					<bean class = "org.apache.commons.io.filefilter.WildcardFileFilter">
						<constructor-arg value = "*.cypher" />
					</bean>
				</constructor-arg>
				<constructor-arg type = "boolean" value = "true" />
			</bean>
		</constructor-arg>
	</bean>
	
	<!-- They are all combined into the beanName that is searched by our graph traverser -->
	<bean name = "semanticMotifsQueries" 
				class = "org.apache.commons.collections15.ListUtils" factory-method = "union" >
		<constructor-arg ref = "semanticMotifsQueriesCustom" />
		<constructor-arg ref = "semanticMotifsQueriesStateMachine" />
	</bean>

	<!-- 
		This is an alternative way to define all the queries in one file.
		For the moment, you must write one query per line and you can use '#' as comments.
		See the class CyQueriesReader for details.
	  
	<bean name = "semanticMotifsQueries" 
				class = "uk.ac.rothamsted.knetminer.backend.cypher.genesearch.CyQueriesReader" factory-method = "readQueries" >
		<constructor-arg value = "${knetminer.configDir}/neo4j/new-queries.txt" />
	</bean>
	-->
	


 	<!-- The Neo4j driver -->
	<bean id = "neoDriver" class = "org.neo4j.driver.GraphDatabase" 
			factory-method="driver">
		<constructor-arg value = "${neo4j.server.boltUrl}" />
		<constructor-arg>
			<bean class = "org.neo4j.driver.AuthTokens" factory-method = "basic">
				<constructor-arg value = "${neo4j.server.user}" />
				<constructor-arg value = "${neo4j.server.password}" />
			</bean>
		</constructor-arg>
		<!-- This does some tuning on the kind of needs we have with Knetminer -->
		<constructor-arg type="org.neo4j.driver.Config" 
			value = "#{T(org.neo4j.driver.Config).builder ()
				.withConnectionAcquisitionTimeout ( 10, T(java.util.concurrent.TimeUnit).SECONDS )
				.withConnectionTimeout ( 20, T(java.util.concurrent.TimeUnit).SECONDS )
				.build ()
			}"
		/>
	</bean>

	<!-- Overall traverser timeout (see the documentation), 8hr is already the default -->	
	<!--  bean name = "traverserTimeoutMins" class = "java.lang.Long"><constructor-arg value = "480"/></bean -->
	
</beans>
